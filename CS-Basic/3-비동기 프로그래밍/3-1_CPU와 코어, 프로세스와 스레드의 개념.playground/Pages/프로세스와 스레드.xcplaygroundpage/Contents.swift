//: [Previous](@previous)

import Foundation

// 3️⃣ 프로그램(Program)

// - 개념
/*
 📱프로그램(Program)이란, 컴퓨터에서 실행할 수 있는 파일(.exe, .dmg)를 의미함
 즉, 단순히 파일 그 자체로서 '정적 프로그램(Static Program)'이기도 함
 쉽게 말하자면, Swift나 C언어, JAVA와 같은 프로그래밍 언어로 작성된 '코드의 모음'
 */


// 4️⃣ 프로세스(Process)

// - 개념
/*
 ⚙️ 프로세스(Process)란, 프로그램을 실행 -> 동적인 상태로 변환하여 작업중인 프로그램을 의미함
 정적 -> 동적으로 변환이 될 시점에, 메모리(Memory) 상에 프로그램이 올라가며, CPU로부터 자원(코어, 스레드)을 할당받게 됨
 */

// - ‼️ 프로그램과 프로세스의 관계 (with. Cpu의 Context Switching)
/*
 📱프로그램이 -> ⚙️프로세스를 진행할 때, 이들의 관계는 1:1 관계가 아닌 1:N 관계로서 진행할 수 있습니다.
 이를, '멀티 프로세스(Multi Process)이며, 각각의 프로세스는 별도의 작업과 독립적인 메모리가 할당됩니다.
 (즉, 프로세스는 병렬형으로 진행되며 각각의 독립적인 구조로서 서로간의 간섭이 어렵습니다 / 높은 안정성과 낮은 접근성)
 */

/*
 ❓CPU가 자원(코어, 스레드)를 할당한다고 했는데?
 각각의 메모리 영역을 할당받기 때문에, CPU는 각각의 프로세스 별 지원을 위해 'Context Switching' 과정을 진행합니다.
 이때, CPU의 부담이 증가하며, 오버헤드가 발생할 수 있다는 단점이 존재합니다.
 
 그래서, 이러한 CPU의 부담을 줄이기 위해 '스레드(S/W)'의 개념이 활용됩니다.
 */


// 5️⃣ 스레드(S/W)

// - 개념
/*
 프로세스 내부에 위치한 '더 작은 단위', 일련의 작업 흐름을 의미합니다.
 동일한 프로세스에서, 동시에 다양한 작업을 수행할 수 있는 '흐름', 즉 Thread 입니다.
 */

// - 주요기능
/*
 스레드는, 메모리 영역(Code, Data, Heap, Stack)중 Stack 만을 독립적으로 할당받습니다.
 즉, 나머지 영역은 [공유 영역]이 되며, 이로 인해 CPU는 Context Switching에 대한 낮은 부담을 가지게 됩니다.
 */

// - 단점
/*
 장점이 곧 단점이 됩니다.
 Code, Data, Heap 메모리 영역의 자원공유로 인해, 특정 공유 메모리 영역에서 문제가 발생할 경우?
 -> 모든 스레드가 영향을 받게 되며, 이는 즉 '동기화 문제'로 귀결됩니다.
 */


//: [Next](@next)
