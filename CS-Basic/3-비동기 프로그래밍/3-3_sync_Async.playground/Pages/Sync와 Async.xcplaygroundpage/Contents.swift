//: [Previous](@previous)

import Foundation

// 3차 : Sync(동기)와 Async(비동기)

// 1️⃣ Sync와 Async의 정의
// 드디어 동기, 비동기란 개념이 등장했다!

// - 큐의 작업 분산 방식
/*
 큐(Queue)는, 작업 분산 방식에 따라 직렬 혹은 병렬식으로 종류가 구분됨
 - 1. 메인큐(Main Queue) : 직렬(Serial) 형식으로, 스레드에서 할당받은 작업(Task)를 메인큐를 통해 메인 스레드(Main Thread)에 단일하게 할당함 (분산 X)
 - 2. 글로벌 큐(Global Queue) : 병렬(Concurrent) 형식으로, 스레드에서 할당받은 작업을 글로벌 큐를 통해 다수의 스레드(Global Thread)로 '분산'하여 할당함
 */

/* - 여기서, GCD(Grand Central Dispatch의 약자로, iOS의 스레드 풀(Thread pool)을 관리하는 API /개발자가 입력한 큐를 통해 동기, 비동기 작업을 실시)는
 큐를 통해 보내진 작업에 대한 '스레드 처리방식' 또한 포함되어야 함
 */

// - 스레드 처리방식?
/*
 큐를 통해 스레드로 보내지는 시점에, 큐는 스레드의 작업 방식을 설정할 수 있음
 1. ⌛️Sync(동시) : 스레드는 요청과 동시에 바로 응답해라 -> 할당된 작업이 끝나기 전까지 다른 작업을 수행할 수 없다!
 2. 🎛️Async(비동기) : 스레드는 요청과 동시에 바로 응답하지 않는다 -> 즉, 작업이 끝나기 전 다른 작업도 동시에 실시해라!
 */


// 2️⃣ Sync와 Async의 예시
// sleep()이란 메서드는 인자값(타입: UInt32)만큼 작업을 기다리는 메서드 입니다.

// 1. 동기(Sync)
// 요청 - 응답이 동시에 이뤄져야 하므로, 아래와 같이 출력됩니다.
//sleep(2)
//print("Hello")

/*
 (...2초가 지나간다)
 Hello
 */


// 2. 비동기(ASync)
// 요청 - 응답이 동시에 이뤄지지 않습니다.
/*
 아래와 같이, async(비동기) 처리방식 내부에 Sleep()메서드와 'Lime'을 출력하는 구문이 있고,
 이후 'Hello'를 출력하는 메서드가 존재할 경우, 비동기 구문이 종료될 때 까지 기다리지 않고 비교적 빨리 응답하는 Hello를 먼저 출력한 후 비동기 구문을 실행합니다.
 */

DispatchQueue.main.async {
    sleep(2)
    print("Lime")
}

print("Hello")

/*
 Hello
 (...2초가 지나간다)
 Lime
 */

//: [Next](@next)
