//: [Previous](@previous)


// Previous..

// 2차 : 동시성 프로그래밍의 필요성과 Queue(큐)의 역할

// 1️⃣ CPU의 2가지 작업방식

// - 작업방식
/*
 ⏩️ 병렬적 방식 : 다수의 코어(Core)를 활용, 멀티 프로세스 및 멀티 스레드를 통해 병렬적으로 작업을 실시
 🔀 동시적 작업 : 프로세스(혹은 스레드)를 번갈아서 매우 빠르게 실행함으로서 '마치 동시에 실행되는 것과 같이' 보이도록 하는 동시적(Concurreny) 작업
 */

// - 의문점
/*
 "다수의 코어로 멀티 프로세스, 멀티 스레드를 활용하면 되는거지, 굳이 '동시에 실행되는 것과 같이' 보이는 동시적 작업을 할 필요가 있을까?
 */


// 2️⃣ 동시성 프로그래밍(Concurrency Programming)의 필요성

// - 병렬적 방식의 한계점
/*
 1. 다수의 코어를 활용할 수 없다는 물리적인 한계 : 수십개의 코어를 탑재하는 것은 매우 어려운 일이다.
 2. 논리적인 측면에서 빠른 처리와 효율성을 증진시킬 필요
    - 예시) 2코어 4스레드(H/W) 환경
        - 총 6개의 작업을 투입시키게 됨 (오래 걸리는 작업 4개 - A, 짧은 시간 내 마무리되는 작업 2개 - B)
        - 그런데, 오래걸리는 A작업을 먼저 시작하게 된다면 ? -> 나머지 짧은 시간이 소요되는 B는 마냥 기다려야 함
        - 따라서, 스레드(S/W)를 활용하여 해당 A, B작업을 분산하여 논리적으로 우선순위에 따라 빠르게 작업을 한다면 보다 효율적이지 않을까?
        - 이와 같은 논리적 측면에서 시작된 것이 바로 '동시성 프로그래밍'
 */


// - 동시성 프로그래밍이란?
/*
 코어(Core), 스레드(H/W)가 담당하는 일련의 작업을 -> 하나의 '스레드(S/W)'가 아닌, 다른 스레드(S/W)에서도 동시에 일을 시키는 방식
 */

//  - 동시성 프로그래밍의 처리방식
/*
 1. 병렬적 한계를 극복, 작업(Task)를 Thread(S/W)로 나눠 처리
    - 멀티 프로세스, 멀티 스레드(H/W)가 병렬적으로 작업을 진행하는 동시 + 더 많은 스레드(S/W)를 활용, 작업을 분산시킴
    - 예시) 카카오톡과 Xcode, Chrome을 순서대로 실행할 경우
        - Process(Thread)A 에서는 카카오톡을 실행시킴 ➟ A스레드(S/W)가 실행하는 작업을 담당함
        - 이후 Xcode를 실행하고, Playground 작업을 실시함 ➟ B스레드(S/W)는 실행부터 작업까지 작업을 담당함
        - 궁금한게 생겨 Chrome을 도중에 실행시킴 - B스레드(S/W)가 작업하는 도중, C스레드(S/W)에 작업이 할당되어 진행됨
        --> 사실, 각각의 프로그램은 동시에 실행되고 동시에 작업되는 것처럼 보이지만 사실 빠른 동시성 프로그래밍에 의해 순차적으로 작업되고 있음
    - 이 때, CPU는 Context Switching을 통해 지원을 실시함
 
 2. 병렬성 + 동시성이 혼합된 작업방식
    - 다시 말해, 동시성 프로그래밍은 병렬적 작업(멀티 프로세스, 멀티 스레드) + 동시성(스레드-S/W)이 혼합된 작업 방식
    - 그런데, 스레드(S/W)에게 작업을 할당하는 것은 누가 담당하는가?
    - 바로, 큐(Queue)란 중간 담당자, 혹은 스케쥴러가 동시성 작업을 위해 스레드(S/W)에게 작업 배치를 실시함
 */



// 정리하자면..
/// CPU(Processor) : 논리적 사고를 담당하는 사장님 Josh 👨🏻‍🦰
/// Core : CPU의 논리적 사고를 바탕으로 연산업무를 처리하는 직원 Kate 👩🏻‍💻
/// Thread(H/W) : Core가 할 수 있는 최소한의 작업단위이자 도구, 모니터 🖥️



//: [Next](@next)
